/* global DBHelper */
let restaurants;
let neighborhoods;
let cuisines;

// var map;
var markers = [];

const mainContent = document.querySelector('main'),
      footer = document.querySelector('footer'),
      filterOptions = document.querySelector('.filter-options'),
      filterResultHeading = document.querySelector('.filter-options h3'),
      filterButton = document.querySelector('#menuFilter'),
      listOfRestaurants = document.querySelector('#restaurants-list'),

// sectionRestaurantsList = document.querySelector('#list-container'),
sectionMap = document.querySelector('#map-container'),
      neighborhoodsSelect = document.querySelector('#neighborhoods-select'),
      cuisinesSelect = document.querySelector('#cuisines-select');

/**
 * Fetch neighborhoods and cuisines as soon as the page is loaded.
 */
document.addEventListener('DOMContentLoaded', () => {
  fetchNeighborhoods();
  fetchCuisines();
});

/**
 * Register to service worker if the browser is compatible.
 */
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('sw.js').then(registration => {
      console.log('registration to serviceWorker complete with scope :', registration.scope);
    });
  });
}

document.onkeypress = function (e) {
  console.log(e.code);
  if (e.charCode === 13 && filterOptions.classList.contains('optionsOpen')) {
    closeMenu();
    console.log(sectionMap.clientHeight);
    listOfRestaurants.setAttribute('tabindex', '0');
    listOfRestaurants.focus();
    // window.scrollTo(0, sectionMap.clientHeight*2);
  }
};

function openMenu() {
  filterOptions.classList.remove('optionsClose');
  mainContent.classList.remove('moveUp');
  footer.classList.remove('moveUp');
  filterOptions.classList.add('optionsOpen');
  filterOptions.setAttribute('aria-hidden', 'false');
  mainContent.classList.add('moveDown');
  footer.classList.add('moveDown');
  filterButton.classList.add('pressed');
  filterButton.blur();
  filterResultHeading.setAttribute('tabindex', '-1');
  filterResultHeading.focus();
}

function closeMenu() {
  filterOptions.classList.remove('optionsOpen');
  filterOptions.classList.add('optionsClose');
  filterOptions.setAttribute('aria-hidden', 'true');
  filterButton.classList.remove('pressed');
  mainContent.classList.remove('moveDown');
  mainContent.classList.add('moveUp');
  footer.classList.remove('moveDown');
  footer.classList.add('moveUp');
  filterResultHeading.removeAttribute('tabindex');
}

filterButton.addEventListener('click', () => {
  if (filterOptions.classList.contains('optionsClose')) {
    openMenu();
  } else {
    closeMenu();
  }
});

/**
 * Fetch all neighborhoods and set their HTML.
 */
const fetchNeighborhoods = () => {
  DBHelper.fetchNeighborhoods().then(neighborhoods => {
    self.neighborhoods = neighborhoods;
    fillNeighborhoodsHTML();
  }).catch(error => console.error(error));
};

/**
 * Set neighborhoods HTML.
 */
const fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {
  const select = neighborhoodsSelect;
  neighborhoods.forEach(neighborhood => {
    const option = document.createElement('option');
    option.innerHTML = neighborhood;
    option.value = neighborhood;
    option.setAttribute('role', 'option');
    option.setAttribute('aria-setsize', neighborhoods.length);
    select.append(option);
  });
};
/**
 * Fetch all cuisines and set their HTML.
 */
const fetchCuisines = () => {
  DBHelper.fetchCuisines().then(cuisines => {
    self.cuisines = cuisines;
    fillCuisinesHTML();
  }).catch(error => console.error(error));
};

/**
 * Set cuisines HTML.
 */
const fillCuisinesHTML = (cuisines = self.cuisines) => {
  const select = cuisinesSelect;
  cuisines.forEach(cuisine => {
    const option = document.createElement('option');
    option.setAttribute('role', 'option');
    option.innerHTML = cuisine;
    option.value = cuisine;
    option.setAttribute('aria-setsize', cuisines.length);
    select.append(option);
  });
};

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = () => {
  let loc = {
    lat: 40.722216,
    lng: -73.987501
  };
  self.map = new google.maps.Map(document.getElementById('map'), {
    zoom: 12,
    center: loc,
    scrollwheel: false
  });
  updateRestaurants();
};

/**
 * Update page and map for current restaurants.
 */
const updateRestaurants = () => {
  const cSelect = cuisinesSelect;
  const nSelect = neighborhoodsSelect;

  const cIndex = cSelect.selectedIndex;
  const nIndex = nSelect.selectedIndex;

  const cuisine = cSelect[cIndex].value;
  const neighborhood = nSelect[nIndex].value;

  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood).then(restaurants => {
    resetRestaurants(restaurants);
    fillRestaurantsHTML();
  }).catch(error => console.error(error));
};

/**
 * Clear current restaurants, their HTML and remove their map markers.
 */
const resetRestaurants = restaurants => {
  // Remove all restaurants
  self.restaurants = [];
  const ul = document.getElementById('restaurants-list');
  ul.innerHTML = '';

  // Remove all map markers

  self.markers.forEach(m => m.setMap(null));
  self.markers = [];
  self.restaurants = restaurants;
};

/**
 * Create all restaurants HTML and add them to the webpage.
 */
const fillRestaurantsHTML = (restaurants = self.restaurants) => {
  const ul = document.getElementById('restaurants-list');
  restaurants.forEach(restaurant => {
    ul.append(createRestaurantHTML(restaurant));
    ul.setAttribute('aria-setsize', restaurants.length);
  });
  addMarkersToMap();
};

/**
 * Return the average note of the restaurant.
 */
const getAverageNote = reviews => {
  let averageNote = 0;
  reviews.forEach(review => {
    averageNote = averageNote + Number(review.rating);
  });
  averageNote = averageNote / reviews.length;
  return Math.round(averageNote * 10) / 10;
};

/**
 * Create restaurant HTML.
 */
const createRestaurantHTML = restaurant => {

  const li = document.createElement('li');
  const figure = document.createElement('figure');
  const figcaption = document.createElement('figcaption');
  const picture = document.createElement('picture');
  const source = document.createElement('source');
  const ndSource = document.createElement('source');
  const thSource = document.createElement('source');
  const image = document.createElement('img');
  const containerNote = document.createElement('div');
  const note = document.createElement('span');

  source.srcset = `${DBHelper.imageUrlForRestaurant(restaurant)}-large_x1.jpg 1x, ${DBHelper.imageUrlForRestaurant(restaurant)}-large_x2.jpg 2x`;
  source.media = '(min-width: 1000px)';

  ndSource.srcset = `${DBHelper.imageUrlForRestaurant(restaurant)}-medium_x1.jpg 1x, ${DBHelper.imageUrlForRestaurant(restaurant)}-medium_x2.jpg 2x`;
  ndSource.media = '(min-width: 420px)';

  thSource.srcset = `${DBHelper.imageUrlForRestaurant(restaurant)}-small_x2.jpg 2x, ${DBHelper.imageUrlForRestaurant(restaurant)}-small_x1.jpg 1x`;
  thSource.media = '(min-width: 320px)';

  image.className = 'restaurant-img';
  image.src = `${DBHelper.imageUrlForRestaurant(restaurant)}-large_x1.jpg`;
  image.setAttribute('sizes', '(max-width: 1100px) 85vw, (min-width: 1101px) 990px');
  image.alt = `${restaurant.name}'s restaurant`;

  note.innerHTML = `${getAverageNote(restaurant.reviews)}/5`;
  containerNote.className = 'main_page';

  containerNote.append(note);

  picture.append(source);
  picture.append(ndSource);
  picture.append(thSource);
  picture.append(image);
  figure.append(picture);
  figure.append(figcaption);

  li.append(containerNote);
  li.append(figure);

  const name = document.createElement('h2');
  name.innerHTML = restaurant.name;
  figcaption.append(name);

  const neighborhood = document.createElement('p');
  neighborhood.innerHTML = restaurant.neighborhood;
  li.append(neighborhood);

  const address = document.createElement('p');
  address.innerHTML = restaurant.address;
  li.append(address);

  const more = document.createElement('a');
  more.innerHTML = 'View Details';
  more.href = DBHelper.urlForRestaurant(restaurant);
  more.setAttribute('aria-label', `View details of ${restaurant.name}`);
  li.append(more);

  return li;
};

/**
 * Add markers for current restaurants to the map.
 */
const addMarkersToMap = (restaurants = self.restaurants) => {
  restaurants.forEach(restaurant => {
    // Add marker to the map
    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);
    google.maps.event.addListener(marker, 'click', () => {
      window.location.href = marker.url;
    });
    self.markers.push(marker);
  });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzdGF1cmFudHMiLCJuZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJtYXJrZXJzIiwibWFpbkNvbnRlbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJmb290ZXIiLCJmaWx0ZXJPcHRpb25zIiwiZmlsdGVyUmVzdWx0SGVhZGluZyIsImZpbHRlckJ1dHRvbiIsImxpc3RPZlJlc3RhdXJhbnRzIiwic2VjdGlvbk1hcCIsIm5laWdoYm9yaG9vZHNTZWxlY3QiLCJjdWlzaW5lc1NlbGVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJmZXRjaE5laWdoYm9yaG9vZHMiLCJmZXRjaEN1aXNpbmVzIiwibmF2aWdhdG9yIiwid2luZG93Iiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwidGhlbiIsInJlZ2lzdHJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJzY29wZSIsIm9ua2V5cHJlc3MiLCJlIiwiY29kZSIsImNoYXJDb2RlIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjbG9zZU1lbnUiLCJjbGllbnRIZWlnaHQiLCJzZXRBdHRyaWJ1dGUiLCJmb2N1cyIsIm9wZW5NZW51IiwicmVtb3ZlIiwiYWRkIiwiYmx1ciIsInJlbW92ZUF0dHJpYnV0ZSIsIkRCSGVscGVyIiwic2VsZiIsImZpbGxOZWlnaGJvcmhvb2RzSFRNTCIsImNhdGNoIiwiZXJyb3IiLCJzZWxlY3QiLCJmb3JFYWNoIiwibmVpZ2hib3Job29kIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInZhbHVlIiwibGVuZ3RoIiwiYXBwZW5kIiwiZmlsbEN1aXNpbmVzSFRNTCIsImN1aXNpbmUiLCJpbml0TWFwIiwibG9jIiwibGF0IiwibG5nIiwibWFwIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsImdldEVsZW1lbnRCeUlkIiwiem9vbSIsImNlbnRlciIsInNjcm9sbHdoZWVsIiwidXBkYXRlUmVzdGF1cmFudHMiLCJjU2VsZWN0IiwiblNlbGVjdCIsImNJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJuSW5kZXgiLCJmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QiLCJyZXNldFJlc3RhdXJhbnRzIiwiZmlsbFJlc3RhdXJhbnRzSFRNTCIsInVsIiwibSIsInNldE1hcCIsInJlc3RhdXJhbnQiLCJjcmVhdGVSZXN0YXVyYW50SFRNTCIsImFkZE1hcmtlcnNUb01hcCIsImdldEF2ZXJhZ2VOb3RlIiwicmV2aWV3cyIsImF2ZXJhZ2VOb3RlIiwicmV2aWV3IiwiTnVtYmVyIiwicmF0aW5nIiwiTWF0aCIsInJvdW5kIiwibGkiLCJmaWd1cmUiLCJmaWdjYXB0aW9uIiwicGljdHVyZSIsInNvdXJjZSIsIm5kU291cmNlIiwidGhTb3VyY2UiLCJpbWFnZSIsImNvbnRhaW5lck5vdGUiLCJub3RlIiwic3Jjc2V0IiwiaW1hZ2VVcmxGb3JSZXN0YXVyYW50IiwibWVkaWEiLCJjbGFzc05hbWUiLCJzcmMiLCJhbHQiLCJuYW1lIiwiYWRkcmVzcyIsIm1vcmUiLCJocmVmIiwidXJsRm9yUmVzdGF1cmFudCIsIm1hcmtlciIsIm1hcE1hcmtlckZvclJlc3RhdXJhbnQiLCJldmVudCIsImFkZExpc3RlbmVyIiwibG9jYXRpb24iLCJ1cmwiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUlBLFdBQUo7QUFDQSxJQUFJQyxhQUFKO0FBQ0EsSUFBSUMsUUFBSjs7QUFFQTtBQUNBLElBQUlDLFVBQVUsRUFBZDs7QUFFQSxNQUFNQyxjQUFjQyxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQXBCO0FBQUEsTUFDRUMsU0FBU0YsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQURYO0FBQUEsTUFFRUUsZ0JBQWdCSCxTQUFTQyxhQUFULENBQXVCLGlCQUF2QixDQUZsQjtBQUFBLE1BR0VHLHNCQUFzQkosU0FBU0MsYUFBVCxDQUF1QixvQkFBdkIsQ0FIeEI7QUFBQSxNQUlFSSxlQUFlTCxTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBSmpC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QyxPQUFPMUcsU0FBUzhDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBYjtBQUNBNEQsT0FBSzNELFNBQUwsR0FBaUIsY0FBakI7QUFDQTJELE9BQUtDLElBQUwsR0FBWXRFLFNBQVN1RSxnQkFBVCxDQUEwQi9CLFVBQTFCLENBQVo7QUFDQTZCLE9BQUs1RSxZQUFMLENBQWtCLFlBQWxCLEVBQWlDLG1CQUFrQitDLFdBQVcyQixJQUFLLEVBQW5FO0FBQ0FoQixLQUFHdEMsTUFBSCxDQUFVd0QsSUFBVjs7QUFFQSxTQUFPbEIsRUFBUDtBQUNELENBN0REOztBQStEQTs7O0FBR0EsTUFBTVQsa0JBQWtCLENBQUNwRixjQUFjMkMsS0FBSzNDLFdBQXBCLEtBQW9DO0FBQzFEQSxjQUFZZ0QsT0FBWixDQUFvQmtDLGNBQWM7QUFDaEM7QUFDQSxVQUFNZ0MsU0FBU3hFLFNBQVN5RSxzQkFBVCxDQUFnQ2pDLFVBQWhDLEVBQTRDdkMsS0FBS21CLEdBQWpELENBQWY7QUFDQUMsV0FBT0MsSUFBUCxDQUFZb0QsS0FBWixDQUFrQkMsV0FBbEIsQ0FBOEJILE1BQTlCLEVBQXNDLE9BQXRDLEVBQStDLE1BQU07QUFDbkQvRixhQUFPbUcsUUFBUCxDQUFnQk4sSUFBaEIsR0FBdUJFLE9BQU9LLEdBQTlCO0FBQ0QsS0FGRDtBQUdBNUUsU0FBS3hDLE9BQUwsQ0FBYXFILElBQWIsQ0FBa0JOLE1BQWxCO0FBQ0QsR0FQRDtBQVFELENBVEQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBEQkhlbHBlciAqL1xyXG5sZXQgcmVzdGF1cmFudHM7XHJcbmxldCBuZWlnaGJvcmhvb2RzO1xyXG5sZXQgY3Vpc2luZXM7XHJcblxyXG4vLyB2YXIgbWFwO1xyXG52YXIgbWFya2VycyA9IFtdO1xyXG5cclxuY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJyksXHJcbiAgZm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9vdGVyJyksXHJcbiAgZmlsdGVyT3B0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXItb3B0aW9ucycpLFxyXG4gIGZpbHRlclJlc3VsdEhlYWRpbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyLW9wdGlvbnMgaDMnKSxcclxuICBmaWx0ZXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudUZpbHRlcicpLFxyXG4gIGxpc3RPZlJlc3RhdXJhbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Jlc3RhdXJhbnRzLWxpc3QnKSxcclxuICAvLyBzZWN0aW9uUmVzdGF1cmFudHNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3QtY29udGFpbmVyJyksXHJcbiAgc2VjdGlvbk1hcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXAtY29udGFpbmVyJyksXHJcbiAgbmVpZ2hib3Job29kc1NlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZWlnaGJvcmhvb2RzLXNlbGVjdCcpLFxyXG4gIGN1aXNpbmVzU2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2N1aXNpbmVzLXNlbGVjdCcpO1xyXG5cclxuLyoqXHJcbiAqIEZldGNoIG5laWdoYm9yaG9vZHMgYW5kIGN1aXNpbmVzIGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgbG9hZGVkLlxyXG4gKi9cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICBmZXRjaE5laWdoYm9yaG9vZHMoKTtcclxuICBmZXRjaEN1aXNpbmVzKCk7XHJcbn0pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlciB0byBzZXJ2aWNlIHdvcmtlciBpZiB0aGUgYnJvd3NlciBpcyBjb21wYXRpYmxlLlxyXG4gKi9cclxuaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCdzdy5qcycpLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ3JlZ2lzdHJhdGlvbiB0byBzZXJ2aWNlV29ya2VyIGNvbXBsZXRlIHdpdGggc2NvcGUgOicsIHJlZ2lzdHJhdGlvbi5zY29wZSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuZG9jdW1lbnQub25rZXlwcmVzcyA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgY29uc29sZS5sb2coZS5jb2RlKTtcclxuICBpZiAoZS5jaGFyQ29kZSA9PT0gMTMgJiYgZmlsdGVyT3B0aW9ucy5jbGFzc0xpc3QuY29udGFpbnMoJ29wdGlvbnNPcGVuJykpIHtcclxuICAgIGNsb3NlTWVudSgpO1xyXG4gICAgY29uc29sZS5sb2coc2VjdGlvbk1hcC5jbGllbnRIZWlnaHQpO1xyXG4gICAgbGlzdE9mUmVzdGF1cmFudHMuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XHJcbiAgICBsaXN0T2ZSZXN0YXVyYW50cy5mb2N1cygpO1xyXG4gICAgLy8gd2luZG93LnNjcm9sbFRvKDAsIHNlY3Rpb25NYXAuY2xpZW50SGVpZ2h0KjIpO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIG9wZW5NZW51KCkge1xyXG4gIGZpbHRlck9wdGlvbnMuY2xhc3NMaXN0LnJlbW92ZSgnb3B0aW9uc0Nsb3NlJyk7XHJcbiAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnbW92ZVVwJyk7XHJcbiAgZm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoJ21vdmVVcCcpO1xyXG4gIGZpbHRlck9wdGlvbnMuY2xhc3NMaXN0LmFkZCgnb3B0aW9uc09wZW4nKTtcclxuICBmaWx0ZXJPcHRpb25zLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICBtYWluQ29udGVudC5jbGFzc0xpc3QuYWRkKCdtb3ZlRG93bicpO1xyXG4gIGZvb3Rlci5jbGFzc0xpc3QuYWRkKCdtb3ZlRG93bicpO1xyXG4gIGZpbHRlckJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdwcmVzc2VkJyk7XHJcbiAgZmlsdGVyQnV0dG9uLmJsdXIoKTtcclxuICBmaWx0ZXJSZXN1bHRIZWFkaW5nLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcclxuICBmaWx0ZXJSZXN1bHRIZWFkaW5nLmZvY3VzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb3NlTWVudSgpIHtcclxuICBmaWx0ZXJPcHRpb25zLmNsYXNzTGlzdC5yZW1vdmUoJ29wdGlvbnNPcGVuJyk7XHJcbiAgZmlsdGVyT3B0aW9ucy5jbGFzc0xpc3QuYWRkKCdvcHRpb25zQ2xvc2UnKTtcclxuICBmaWx0ZXJPcHRpb25zLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG4gIGZpbHRlckJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdwcmVzc2VkJyk7XHJcbiAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnbW92ZURvd24nKTtcclxuICBtYWluQ29udGVudC5jbGFzc0xpc3QuYWRkKCdtb3ZlVXAnKTtcclxuICBmb290ZXIuY2xhc3NMaXN0LnJlbW92ZSgnbW92ZURvd24nKTtcclxuICBmb290ZXIuY2xhc3NMaXN0LmFkZCgnbW92ZVVwJyk7XHJcbiAgZmlsdGVyUmVzdWx0SGVhZGluZy5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XHJcbn1cclxuXHJcbmZpbHRlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBpZiAoZmlsdGVyT3B0aW9ucy5jbGFzc0xpc3QuY29udGFpbnMoJ29wdGlvbnNDbG9zZScpKSB7XHJcbiAgICBvcGVuTWVudSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjbG9zZU1lbnUoKTtcclxuICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEZldGNoIGFsbCBuZWlnaGJvcmhvb2RzIGFuZCBzZXQgdGhlaXIgSFRNTC5cclxuICovXHJcbmNvbnN0IGZldGNoTmVpZ2hib3Job29kcyA9ICgpID0+IHtcclxuICBEQkhlbHBlci5mZXRjaE5laWdoYm9yaG9vZHMoKVxyXG4gICAgLnRoZW4obmVpZ2hib3Job29kcyA9PiB7XHJcbiAgICAgIHNlbGYubmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHM7XHJcbiAgICAgIGZpbGxOZWlnaGJvcmhvb2RzSFRNTCgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0IG5laWdoYm9yaG9vZHMgSFRNTC5cclxuICovXHJcbmNvbnN0IGZpbGxOZWlnaGJvcmhvb2RzSFRNTCA9IChuZWlnaGJvcmhvb2RzID0gc2VsZi5uZWlnaGJvcmhvb2RzKSA9PiB7XHJcbiAgY29uc3Qgc2VsZWN0ID0gbmVpZ2hib3Job29kc1NlbGVjdDtcclxuICBuZWlnaGJvcmhvb2RzLmZvckVhY2gobmVpZ2hib3Job29kID0+IHtcclxuICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgb3B0aW9uLmlubmVySFRNTCA9IG5laWdoYm9yaG9vZDtcclxuICAgIG9wdGlvbi52YWx1ZSA9IG5laWdoYm9yaG9vZDtcclxuICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnb3B0aW9uJyk7XHJcbiAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdhcmlhLXNldHNpemUnLCBuZWlnaGJvcmhvb2RzLmxlbmd0aCk7XHJcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcbiAgfSk7XHJcbn07XHJcbi8qKlxyXG4gKiBGZXRjaCBhbGwgY3Vpc2luZXMgYW5kIHNldCB0aGVpciBIVE1MLlxyXG4gKi9cclxuY29uc3QgZmV0Y2hDdWlzaW5lcyA9ICgpID0+IHtcclxuICBEQkhlbHBlci5mZXRjaEN1aXNpbmVzKClcclxuICAgIC50aGVuKGN1aXNpbmVzID0+IHtcclxuICAgICAgc2VsZi5jdWlzaW5lcyA9IGN1aXNpbmVzO1xyXG4gICAgICBmaWxsQ3Vpc2luZXNIVE1MKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgY3Vpc2luZXMgSFRNTC5cclxuICovXHJcbmNvbnN0IGZpbGxDdWlzaW5lc0hUTUwgPSAoY3Vpc2luZXMgPSBzZWxmLmN1aXNpbmVzKSA9PiB7XHJcbiAgY29uc3Qgc2VsZWN0ID0gY3Vpc2luZXNTZWxlY3Q7XHJcbiAgY3Vpc2luZXMuZm9yRWFjaChjdWlzaW5lID0+IHtcclxuICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgncm9sZScsICdvcHRpb24nKTtcclxuICAgIG9wdGlvbi5pbm5lckhUTUwgPSBjdWlzaW5lO1xyXG4gICAgb3B0aW9uLnZhbHVlID0gY3Vpc2luZTtcclxuICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2V0c2l6ZScsIGN1aXNpbmVzLmxlbmd0aCk7XHJcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBHb29nbGUgbWFwLCBjYWxsZWQgZnJvbSBIVE1MLlxyXG4gKi9cclxud2luZG93LmluaXRNYXAgPSAoKSA9PiB7XHJcbiAgbGV0IGxvYyA9IHtcclxuICAgIGxhdDogNDAuNzIyMjE2LFxyXG4gICAgbG5nOiAtNzMuOTg3NTAxXHJcbiAgfTtcclxuICBzZWxmLm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XHJcbiAgICB6b29tOiAxMixcclxuICAgIGNlbnRlcjogbG9jLFxyXG4gICAgc2Nyb2xsd2hlZWw6IGZhbHNlXHJcbiAgfSk7XHJcbiAgdXBkYXRlUmVzdGF1cmFudHMoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgcGFnZSBhbmQgbWFwIGZvciBjdXJyZW50IHJlc3RhdXJhbnRzLlxyXG4gKi9cclxuY29uc3QgdXBkYXRlUmVzdGF1cmFudHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgY1NlbGVjdCA9IGN1aXNpbmVzU2VsZWN0O1xyXG4gIGNvbnN0IG5TZWxlY3QgPSBuZWlnaGJvcmhvb2RzU2VsZWN0O1xyXG5cclxuICBjb25zdCBjSW5kZXggPSBjU2VsZWN0LnNlbGVjdGVkSW5kZXg7XHJcbiAgY29uc3QgbkluZGV4ID0gblNlbGVjdC5zZWxlY3RlZEluZGV4O1xyXG5cclxuICBjb25zdCBjdWlzaW5lID0gY1NlbGVjdFtjSW5kZXhdLnZhbHVlO1xyXG4gIGNvbnN0IG5laWdoYm9yaG9vZCA9IG5TZWxlY3RbbkluZGV4XS52YWx1ZTtcclxuXHJcbiAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZClcclxuICAgIC50aGVuKHJlc3RhdXJhbnRzID0+IHtcclxuICAgICAgcmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cyk7XHJcbiAgICAgIGZpbGxSZXN0YXVyYW50c0hUTUwoKTtcclxuICAgIH0pLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDbGVhciBjdXJyZW50IHJlc3RhdXJhbnRzLCB0aGVpciBIVE1MIGFuZCByZW1vdmUgdGhlaXIgbWFwIG1hcmtlcnMuXHJcbiAqL1xyXG5jb25zdCByZXNldFJlc3RhdXJhbnRzID0gKHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgLy8gUmVtb3ZlIGFsbCByZXN0YXVyYW50c1xyXG4gIHNlbGYucmVzdGF1cmFudHMgPSBbXTtcclxuICBjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50cy1saXN0Jyk7XHJcbiAgdWwuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gIC8vIFJlbW92ZSBhbGwgbWFwIG1hcmtlcnNcclxuXHJcbiAgc2VsZi5tYXJrZXJzLmZvckVhY2gobSA9PiBtLnNldE1hcChudWxsKSk7XHJcbiAgc2VsZi5tYXJrZXJzID0gW107XHJcbiAgc2VsZi5yZXN0YXVyYW50cyA9IHJlc3RhdXJhbnRzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhbGwgcmVzdGF1cmFudHMgSFRNTCBhbmQgYWRkIHRoZW0gdG8gdGhlIHdlYnBhZ2UuXHJcbiAqL1xyXG5jb25zdCBmaWxsUmVzdGF1cmFudHNIVE1MID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcclxuICByZXN0YXVyYW50cy5mb3JFYWNoKHJlc3RhdXJhbnQgPT4ge1xyXG4gICAgdWwuYXBwZW5kKGNyZWF0ZVJlc3RhdXJhbnRIVE1MKHJlc3RhdXJhbnQpKTtcclxuICAgIHVsLnNldEF0dHJpYnV0ZSgnYXJpYS1zZXRzaXplJywgcmVzdGF1cmFudHMubGVuZ3RoKTtcclxuICB9KTtcclxuICBhZGRNYXJrZXJzVG9NYXAoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIGF2ZXJhZ2Ugbm90ZSBvZiB0aGUgcmVzdGF1cmFudC5cclxuICovXHJcbmNvbnN0IGdldEF2ZXJhZ2VOb3RlID0gKHJldmlld3MpID0+IHtcclxuICBsZXQgYXZlcmFnZU5vdGUgPSAwO1xyXG4gIHJldmlld3MuZm9yRWFjaChyZXZpZXcgPT4ge1xyXG4gICAgYXZlcmFnZU5vdGUgPSBhdmVyYWdlTm90ZSArIE51bWJlcihyZXZpZXcucmF0aW5nKTtcclxuICB9KTtcclxuICBhdmVyYWdlTm90ZSA9IGF2ZXJhZ2VOb3RlIC8gcmV2aWV3cy5sZW5ndGg7XHJcbiAgcmV0dXJuIChNYXRoLnJvdW5kKGF2ZXJhZ2VOb3RlICogMTApKSAvIDEwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwuXHJcbiAqL1xyXG5jb25zdCBjcmVhdGVSZXN0YXVyYW50SFRNTCA9IChyZXN0YXVyYW50KSA9PiB7XHJcbiAgXHJcbiAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gIGNvbnN0IGZpZ3VyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ZpZ3VyZScpO1xyXG4gIGNvbnN0IGZpZ2NhcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmaWdjYXB0aW9uJyk7XHJcbiAgY29uc3QgcGljdHVyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3BpY3R1cmUnKTtcclxuICBjb25zdCBzb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcclxuICBjb25zdCBuZFNvdXJjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xyXG4gIGNvbnN0IHRoU291cmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJyk7XHJcbiAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICBjb25zdCBjb250YWluZXJOb3RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgY29uc3Qgbm90ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHJcbiAgc291cmNlLnNyY3NldCA9IGAke0RCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KX0tbGFyZ2VfeDEuanBnIDF4LCAke0RCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KX0tbGFyZ2VfeDIuanBnIDJ4YDtcclxuICBzb3VyY2UubWVkaWEgPSAnKG1pbi13aWR0aDogMTAwMHB4KSc7XHJcblxyXG4gIG5kU291cmNlLnNyY3NldCA9IGAke0RCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KX0tbWVkaXVtX3gxLmpwZyAxeCwgJHtEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCl9LW1lZGl1bV94Mi5qcGcgMnhgO1xyXG4gIG5kU291cmNlLm1lZGlhID0gJyhtaW4td2lkdGg6IDQyMHB4KSc7XHJcbiAgXHJcbiAgdGhTb3VyY2Uuc3Jjc2V0ID0gYCR7REJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfS1zbWFsbF94Mi5qcGcgMngsICR7REJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfS1zbWFsbF94MS5qcGcgMXhgO1xyXG4gIHRoU291cmNlLm1lZGlhID0gJyhtaW4td2lkdGg6IDMyMHB4KSc7XHJcbiAgXHJcbiAgaW1hZ2UuY2xhc3NOYW1lID0gJ3Jlc3RhdXJhbnQtaW1nJztcclxuICBpbWFnZS5zcmMgPSBgJHtEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCl9LWxhcmdlX3gxLmpwZ2A7XHJcbiAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzaXplcycsICcobWF4LXdpZHRoOiAxMTAwcHgpIDg1dncsIChtaW4td2lkdGg6IDExMDFweCkgOTkwcHgnKTtcclxuICBpbWFnZS5hbHQgPSBgJHtyZXN0YXVyYW50Lm5hbWV9J3MgcmVzdGF1cmFudGA7XHJcbiAgXHJcbiAgbm90ZS5pbm5lckhUTUwgPSBgJHtnZXRBdmVyYWdlTm90ZShyZXN0YXVyYW50LnJldmlld3MpfS81YDtcclxuICBjb250YWluZXJOb3RlLmNsYXNzTmFtZSA9ICdtYWluX3BhZ2UnO1xyXG5cclxuICBjb250YWluZXJOb3RlLmFwcGVuZChub3RlKTtcclxuXHJcbiAgcGljdHVyZS5hcHBlbmQoc291cmNlKTtcclxuICBwaWN0dXJlLmFwcGVuZChuZFNvdXJjZSk7XHJcbiAgcGljdHVyZS5hcHBlbmQodGhTb3VyY2UpO1xyXG4gIHBpY3R1cmUuYXBwZW5kKGltYWdlKTtcclxuICBmaWd1cmUuYXBwZW5kKHBpY3R1cmUpO1xyXG4gIGZpZ3VyZS5hcHBlbmQoZmlnY2FwdGlvbik7XHJcbiAgXHJcbiAgbGkuYXBwZW5kKGNvbnRhaW5lck5vdGUpO1xyXG4gIGxpLmFwcGVuZChmaWd1cmUpO1xyXG4gIFxyXG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xyXG4gIGZpZ2NhcHRpb24uYXBwZW5kKG5hbWUpO1xyXG5cclxuICBjb25zdCBuZWlnaGJvcmhvb2QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgbmVpZ2hib3Job29kLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmVpZ2hib3Job29kO1xyXG4gIGxpLmFwcGVuZChuZWlnaGJvcmhvb2QpO1xyXG5cclxuICBjb25zdCBhZGRyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gIGFkZHJlc3MuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5hZGRyZXNzO1xyXG4gIGxpLmFwcGVuZChhZGRyZXNzKTtcclxuXHJcbiAgY29uc3QgbW9yZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICBtb3JlLmlubmVySFRNTCA9ICdWaWV3IERldGFpbHMnO1xyXG4gIG1vcmUuaHJlZiA9IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcbiAgbW9yZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBgVmlldyBkZXRhaWxzIG9mICR7cmVzdGF1cmFudC5uYW1lfWApO1xyXG4gIGxpLmFwcGVuZChtb3JlKTtcclxuXHJcbiAgcmV0dXJuIGxpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZCBtYXJrZXJzIGZvciBjdXJyZW50IHJlc3RhdXJhbnRzIHRvIHRoZSBtYXAuXHJcbiAqL1xyXG5jb25zdCBhZGRNYXJrZXJzVG9NYXAgPSAocmVzdGF1cmFudHMgPSBzZWxmLnJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgcmVzdGF1cmFudHMuZm9yRWFjaChyZXN0YXVyYW50ID0+IHtcclxuICAgIC8vIEFkZCBtYXJrZXIgdG8gdGhlIG1hcFxyXG4gICAgY29uc3QgbWFya2VyID0gREJIZWxwZXIubWFwTWFya2VyRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBzZWxmLm1hcCk7XHJcbiAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsICgpID0+IHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtYXJrZXIudXJsO1xyXG4gICAgfSk7XHJcbiAgICBzZWxmLm1hcmtlcnMucHVzaChtYXJrZXIpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuXHJcbiJdfQ==
